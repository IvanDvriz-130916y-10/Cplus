#include <iostream>
#include <vector>
#include <cstdlib>   // для system("pause")
using namespace std;

/// ==============================
/// Часть 1. Шаблон сортировки Sort
/// ==============================

template <typename T>
class Sort {
public:
    // Пузырьковая сортировка для массива объектов типа T.
    // Сортировка производится по возрастанию с использованием перегруженного оператора <.
    static void bubbleSort(T arr[], int n) {
        bool swapped;
        for (int i = 0; i < n - 1; ++i) {
            swapped = false;
            for (int j = 0; j < n - i - 1; ++j) {
                if (arr[j + 1] < arr[j]) {
                    T temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) // если обменов не произошло, массив уже отсортирован
                break;
        }
    }
};

/// =====================================
/// Часть 2. Пользовательский тип RailCar
/// =====================================

/// Структура RailCar описывает вагон железнодорожного состава.
/// Для простоты сортировка производится по полю id.
struct RailCar {
    int id; // идентификатор вагона
    RailCar() : id(0) {}
    RailCar(int id) : id(id) {}

    // Перегрузка оператора < для сравнения вагонов по id.
    // Это требуется для сортировки.
    bool operator<(const RailCar& other) const {
        return id < other.id;
    }
};

// Перегрузка оператора вывода для RailCar, чтобы можно было выводить объект в поток.
ostream& operator<<(ostream& os, const RailCar& rc) {
    os << rc.id;
    return os;
}

/// ==============================================
/// Часть 3. Шаблон стека TStack – для имитации тупика
/// ==============================================

template <typename T>
class TStack {
private:
    vector<T> s; // Вектор в качестве внутреннего контейнера
public:
    // Помещает элемент в верхнюю часть стека.
    void push(const T& elem) {
        s.push_back(elem);
    }
    // Извлекает верхний элемент и возвращает его.
    T pop() {
        T topElem = s.back();
        s.pop_back();
        return topElem;
    }
    // Возвращает элемент, находящийся на вершине стека, без удаления.
    T top() const {
        return s.back();
    }
    // Проверка: пуст ли стек.
    bool empty() const {
        return s.empty();
    }
    // Возвращает текущее число элементов в стеке.
    size_t size() const {
        return s.size();
    }
    // Функция для вывода содержимого стека от вершины к основанию (для отладки).
    void print() const {
        for (int i = s.size() - 1; i >= 0; i--) {
            cout << s[i] << " ";
        }
        cout << endl;
    }
};

/// ==============================================
/// Часть 4. Основная программа. Симуляция сортировки состава.
/// ==============================================

int main() {
    // Локаль для корректного отображения символов (при необходимости)
    setlocale(LC_ALL, "ru");

    cout << "Лабораторная работа №9\n";
    cout << "Программа сортировки железнодорожного состава с использованием шаблонов Sort и TStack\n\n";

    // Исходный железнодорожный состав.
    // Входные данные: 1 5 3 5 3 1.
    RailCar train[] = { RailCar(1), RailCar(5), RailCar(3), RailCar(5), RailCar(3), RailCar(1) };
    const int trainSize = sizeof(train) / sizeof(train[0]);

    // Вывод исходного состава.
    cout << "Исходный состав вагонов: ";
    for (int i = 0; i < trainSize; i++) {
        cout << train[i] << " ";
    }
    cout << "\n\n";

    // 4.1. Сортировка состава с использованием шаблона Sort.
    // Здесь применяется пузырьковая сортировка для массива объектов типа RailCar.
    Sort<RailCar>::bubbleSort(train, trainSize);
    cout << "Отсортированный состав (по возрастанию id): ";
    for (int i = 0; i < trainSize; i++) {
        cout << train[i] << " ";
    }
    cout << "\n\n";

    // 4.2. Симуляция сортировки с использованием тупика (стека TStack).
    //
    // Схема железнодорожного разъезда:
    //   [Входной путь] --> [Тупик] --> [Выходной путь]
    //
    // Для имитации процесса:
    // 1. Вагончики последовательно заезжают с входного пути в тупик.
    // 2. Затем они выезжают из тупика и формируют финальный состав.
    //
    // Заметим, что при перемещении через тупик порядок вагонов меняется (они извлекаются по принципу LIFO).

    TStack<RailCar> siding; // создаём объект стека, имитирующего тупик

    cout << "Моделирование движения вагонов в тупик:\n";
    // Заезд всех вагонов в тупик.
    for (int i = 0; i < trainSize; i++) {
        cout << "Вагон " << train[i] << " заезжает в тупик.\n";
        siding.push(train[i]);
    }
    cout << "\nСодержимое тупика (от верхушки к основанию): ";
    siding.print();

    // Выезд вагонов из тупика.
    // Будем извлекать вагончики из тупика и записывать их в вектор outputTrain.
    vector<RailCar> outputTrain;
    cout << "\nМоделирование выезда вагонов из тупика:\n";
    while (!siding.empty()) {
        RailCar rc = siding.pop();
        cout << "Вагон " << rc << " выезжает из тупика.\n";
        outputTrain.push_back(rc);
    }

    // Вывод финального состава.
    cout << "\nФинальный состав вагонов после сортировки через тупик:\n";
    // Обратите внимание, что порядок может оказаться обратным исходному порядку заезда в тупик.
    for (size_t i = 0; i < outputTrain.size(); i++) {
        cout << outputTrain[i] << " ";
    }
    cout << "\n\n";

    cout << "Дополнительную информация и блок-схемы алгоритмов приведены в отчёте по лабораторной работе.\n";
    cout << "Нажмите любую клавишу для выхода...\n";
    system("pause");
    return 0;
}