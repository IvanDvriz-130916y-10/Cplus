#include <iostream>
#include "Stroka.h"
using namespace std;

int main(void)
{

    setlocale(LC_ALL, "ru");

    // Создаем объекты класса Stroka разными способами:
    Stroka s1("qwert");  // инициализация строкой "qwert"
    Stroka s3;           // объект, созданный конструктором по умолчанию (выделено 80 символов)
    Stroka s4(s1);       // копирующий конструктор (s4 будет равен s1)
    Stroka s5;           // пустая строка для дальнейшего использования

    // Ввод строки для s3 (при этом ввод производится с клавиатуры)
    cout << "Введите строку для s3: ";
    s3.vvod();

    // Использование оператора присваивания и неявного преобразования:
    // Для присваивания литерала строке применяется конструктор Stroka(const char*).
    s3 = "asdfg";

    // Вывод строки s3
    cout << "Содержимое s3: ";
    s3.vyvod();
    cout << endl;

    // Использование оператора сцепления (+)
    // Согласно условию, этот оператор модифицирует левый операнд.
    // Цепочкой складываем строки: s5 = s1 + s3 + s4;
    s5 = s1;  // присваиваем s1 объекту s5
    s5 + s3;  // добавляем к s5 содержимое s3
    s5 + s4;  // добавляем к s5 содержимое s4

    cout << "Длина s5 = " << s5.dlina() << endl;
    cout << "Содержимое s5: ";
    s5.vyvod();
    cout << endl;

    // Сравнение строк
    if (s1 == s5)
        cout << "Строки s1 и s5 равны" << endl;
    else if (s1 == s4)
        cout << "Строки s1 и s4 равны" << endl;

    // Пример использования конструктора с выделением памяти заданного размера:
    Stroka s6(100); // создаётся объект s6 с выделением 100 символов
    s6 = "Это строка с динамически выделенной памятью.";
    cout << "Содержимое s6: ";
    s6.vyvod();
    cout << "\nДлина s6 = " << s6.dlina() << endl;

    // Ответ на вопрос: "Понадобится ли деструктор при наличии конструктора с динамической памятью?"
    // Ответ: Да, поскольку память выделяется динамически (оператор new),
    // необходимо корректно освобождать её в деструкторе, чтобы избежать утечек памяти.

    return 0;
}